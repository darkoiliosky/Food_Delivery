import React, { useEffect, useState } from "react";
import axios from "axios";
import { useAuth } from "../../context/AuthContext";
import {
  Container,
  Title,
  DashboardContent,
  Section,
  SectionTitle,
  OrderList,
  OrderCard,
  StatusButton,
  Message,
} from "./RestaurantDashboard.styles";

interface Order {
  id: number;
  status: string;
  total_price: number;
  created_at?: string;
}

const RestaurantDashboard: React.FC = () => {
  const { user } = useAuth();
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    if (!user || user.role !== "restaurant") {
      setLoading(false);
      return;
    }

    const fetchRestaurantOrders = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get<Order[]>(
          "http://localhost:5000/restaurant/orders",
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        console.log("üì¶ –î–æ–±–∏–µ–Ω–∏ –Ω–∞—Ä–∞—á–∫–∏:", response.data); // –î–æ–¥–∞—ò –∑–∞ –¥–µ–±–∞–≥–∏—Ä–∞—ö–µ
        setOrders(response.data);
      } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –Ω–∞—Ä–∞—á–∫–∏:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchRestaurantOrders();
  }, [user]);

  // –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–∞—Ä–∞—á–∫–∞
  const updateOrderStatus = async (orderId: number, newStatus: string) => {
    try {
      const token = localStorage.getItem("token");
      await axios.put(
        `http://localhost:5000/orders/${orderId}/status`,
        { status: newStatus },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      setOrders((prev) =>
        prev.map((o) => (o.id === orderId ? { ...o, status: newStatus } : o))
      );
    } catch (err) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å:", err);
      alert("–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –∞–∂—É—Ä–∏—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ—Ç!");
    }
  };

  if (loading) return <Message>üîÑ –í—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –Ω–∞—Ä–∞—á–∫–∏—Ç–µ...</Message>;

  if (!user || user.role !== "restaurant") {
    return (
      <Container>
        <Title>üö´ –ù–µ–º–∞—Ç–µ –ø—Ä–∏—Å—Ç–∞–ø –¥–æ –æ–≤–∞–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.</Title>
      </Container>
    );
  }

  return (
    <Container>
      <Title>üìä –ö–æ–Ω—Ç—Ä–æ–ª–Ω–∞ –¢–∞–±–ª–∞ –∑–∞ –†–µ—Å—Ç–æ—Ä–∞–Ω</Title>
      <DashboardContent>
        <Section>
          <SectionTitle>–ù–∞—Ä–∞—á–∫–∏</SectionTitle>
          {orders.length === 0 ? (
            <Message>üì≠ –ù–µ–º–∞ –Ω–∞—Ä–∞—á–∫–∏ –∑–∞ –ø—Ä–∏–∫–∞–∂—É–≤–∞—ö–µ.</Message>
          ) : (
            <OrderList>
              {orders.map((order) => (
                <OrderCard key={order.id}>
                  <p>
                    <strong>–ù–∞—Ä–∞—á–∫–∞ #{order.id}</strong>
                  </p>
                  <p>
                    <strong>–°—Ç–∞—Ç—É—Å:</strong> {order.status}
                  </p>
                  <p>
                    <strong>–¶–µ–Ω–∞:</strong>{" "}
                    {Number(order.total_price).toFixed(2)} –¥–µ–Ω.
                  </p>
                  {order.created_at && (
                    <p>
                      <strong>–î–∞—Ç—É–º:</strong>{" "}
                      {new Date(order.created_at).toLocaleString()}
                    </p>
                  )}

                  {/* –ö–æ–Ω—Ç—Ä–æ–ª–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å–æ—Ç –Ω–∞ –Ω–∞—Ä–∞—á–∫–∏—Ç–µ */}
                  {order.status === "–ü—Ä–∏–º–µ–Ω–∞" && (
                    <StatusButton
                      onClick={() =>
                        updateOrderStatus(order.id, "–í–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞")
                      }
                    >
                      üèÅ –ó–∞–ø–æ—á–Ω–∏ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
                    </StatusButton>
                  )}

                  {order.status === "–í–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞" && (
                    <StatusButton
                      onClick={() => updateOrderStatus(order.id, "–ó–∞–≤—Ä—à–µ–Ω–∞")}
                    >
                      ‚úÖ –ó–∞–≤—Ä—à–∏ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
                    </StatusButton>
                  )}
                </OrderCard>
              ))}
            </OrderList>
          )}
        </Section>
      </DashboardContent>
    </Container>
  );
};

export default RestaurantDashboard;
