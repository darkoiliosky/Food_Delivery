import React, { useEffect, useState } from "react";
import axios from "axios";
import { useAuth } from "../../context/AuthContext";
import styled from "styled-components";

const Container = styled.div`
  max-width: 900px;
  margin: 40px auto;
  padding: 20px;
  background: #ffffff;
  border-radius: 10px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
`;

const Title = styled.h2`
  text-align: center;
  margin-bottom: 20px;
`;

const OrderList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 15px;
`;

const OrderCard = styled.div`
  background: #f7f9fc;
  border-left: 5px solid #3498db;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 10px;
`;

const StatusButton = styled.button`
  margin-top: 10px;
  padding: 8px 12px;
  background-color: #3498db;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  &:hover {
    background-color: #2980b9;
  }
`;

interface Order {
  id: number;
  status: string;
  total_price: number;
  created_at?: string;
}

const RestaurantDashboard: React.FC = () => {
  const { user } = useAuth();
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    if (!user || user.role !== "restaurant") {
      setLoading(false);
      return;
    }

    const fetchRestaurantOrders = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get<Order[]>(
          "http://localhost:5000/restaurant/orders",
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        console.log("üì¶ Orders fetched:", response.data); // –î–æ–¥–∞—ò –æ–≤–∞ –∑–∞ –¥–µ–±–∞–≥–∏—Ä–∞—ö–µ

        setOrders(response.data);
      } catch (error) {
        console.error("Error fetching restaurant orders:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchRestaurantOrders();
  }, [user]);

  // –ê–∂—É—Ä–∏—Ä–∞—ö–µ (PUT) /orders/:id/status
  const updateOrderStatus = async (orderId: number, newStatus: string) => {
    try {
      const token = localStorage.getItem("token");
      await axios.put(
        `http://localhost:5000/orders/${orderId}/status`,
        { status: newStatus },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setOrders((prev) =>
        prev.map((o) => (o.id === orderId ? { ...o, status: newStatus } : o))
      );
    } catch (err) {
      console.error("Error updating order status:", err);
      alert("–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –∞–∂—É—Ä–∏—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ—Ç!");
    }
  };

  if (loading) return <Container>–í—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –Ω–∞—Ä–∞—á–∫–∏—Ç–µ...</Container>;

  if (!user || user.role !== "restaurant") {
    return (
      <Container>
        <Title>–†–µ—Å—Ç–æ—Ä–∞–Ω Dashboard</Title>
        <p>–ù–µ–º–∞—Ç–µ –æ–≤–ª–∞—Å—Ç—É–≤–∞—ö–µ –∑–∞ –æ–≤–∞–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.</p>
      </Container>
    );
  }

  return (
    <Container>
      <Title>–†–µ—Å—Ç–æ—Ä–∞–Ω Dashboard</Title>
      {orders.length === 0 ? (
        <p>–ù–µ–º–∞ –Ω–∞—Ä–∞—á–∫–∏ –∑–∞ –ø—Ä–∏–∫–∞–∂—É–≤–∞—ö–µ.</p>
      ) : (
        <OrderList>
          {orders.map((order) => (
            <OrderCard key={order.id}>
              <p>
                <strong>–ù–∞—Ä–∞—á–∫–∞ #{order.id}</strong> ‚Äî –°—Ç–∞—Ç—É—Å: {order.status}
              </p>
              <p>–¶–µ–Ω–∞: {Number(order.total_price).toFixed(2)} –¥–µ–Ω.</p>
              {order.created_at && (
                <p>–î–∞—Ç—É–º: {new Date(order.created_at).toLocaleString()}</p>
              )}

              {/* –õ–æ–≥–∏–∫–∞: –†–µ—Å—Ç–æ—Ä–∞–Ω –º–µ–Ω—É–≤–∞ –æ–¥ ‚Äú–ü—Ä–∏–º–µ–Ω–∞‚Äù -> ‚Äú–í–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞‚Äù, –ø–∞ -> ‚Äú–ó–∞–≤—Ä—à–µ–Ω–∞‚Äù */}
              {order.status === "–ü—Ä–∏–º–µ–Ω–∞" && (
                <StatusButton
                  onClick={() => updateOrderStatus(order.id, "–í–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞")}
                >
                  –ó–∞–ø–æ—á–Ω–∏ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
                </StatusButton>
              )}

              {order.status === "–í–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞" && (
                <StatusButton
                  onClick={() => updateOrderStatus(order.id, "–ó–∞–≤—Ä—à–µ–Ω–∞")}
                >
                  –ó–∞–≤—Ä—à–∏ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
                </StatusButton>
              )}

              {/* –ê–∫–æ –µ –≤–æ –¥–æ—Å—Ç–∞–≤–∞, –∏—Å–ø–æ—Ä–∞—á–∞–Ω–∞, –∏—Ç–Ω., –Ω–µ–º–∞ –∫–æ–ø—á–µ */}
            </OrderCard>
          ))}
        </OrderList>
      )}
    </Container>
  );
};

export default RestaurantDashboard;
