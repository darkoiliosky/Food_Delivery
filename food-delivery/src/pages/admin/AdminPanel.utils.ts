// AdminPanel.utils.ts
import axios from "axios";
// –ò–Ω—Ç–µ—Ä—Ñ–µ—ò—Å–∏
export interface Restaurant {
  id: number;
  name: string;
  cuisine: string;
  image_url: string;
  working_hours: string;
  menuItems?: MenuItem[];
  imageFile?: File | null;
}

export interface MenuItem {
  id?: number;
  name: string;
  price: string;
  category: string;
  ingredients?: string[]; // ‚úÖ –î–æ–¥–∞–¥–∏ `ingredients`

  image_url?: string;
  imageFile?: File | null;
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ –∑–µ–º–∞—ö–µ –Ω–∞ —Å–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ + –º–µ–Ω–∏
export const fetchRestaurants = async (): Promise<Restaurant[]> => {
  try {
    const response = await axios.get<Restaurant[]>(
      "http://localhost:5000/restaurants"
    );

    const restaurantsWithMenu = await Promise.all(
      response.data.map(async (restaurant) => {
        try {
          const menuResponse = await axios.get<MenuItem[]>(
            `http://localhost:5000/restaurants/${restaurant.id}/menu`
          );

          // ‚úÖ –û—Å–∏–≥—É—Ä–∞—ò —Å–µ –¥–µ–∫–∞ `ingredients` —Å–µ–∫–æ–≥–∞—à –µ –Ω–∏–∑–∞ –∏ –æ—Ç—Å—Ç—Ä–∞–Ω—É–≤–∞ `null`
          const menuItemsWithIngredients = menuResponse.data.map((item) => ({
            ...item,
            ingredients: Array.isArray(item.ingredients)
              ? item.ingredients.filter((ing) => typeof ing === "string")
              : [], // –ê–∫–æ `ingredients` –Ω–µ –µ –Ω–∏–∑–∞, –≤—Ä–∞—Ç–∏ –ø—Ä–∞–∑–Ω–∞ –Ω–∏–∑–∞
          }));

          return { ...restaurant, menuItems: menuItemsWithIngredients };
        } catch (error) {
          console.error(
            `‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –º–µ–Ω–∏ –∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω ID: ${restaurant.id}`,
            error
          );
          return { ...restaurant, menuItems: [] };
        }
      })
    );

    return restaurantsWithMenu;
  } catch (error) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏:", error);
    return [];
  }
};

// ‚úÖ –î–æ–¥–∞–≤–∞—ö–µ –Ω–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
export const addRestaurant = async (newRestaurant: FormData) => {
  try {
    await axios.post("http://localhost:5000/restaurants", newRestaurant, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem("token")}`,
        "Content-Type": "multipart/form-data",
      },
    });
  } catch (error) {
    console.error("Error adding restaurant:", error);
  }
};

// ‚úÖ –ê–∂—É—Ä–∏—Ä–∞—ö–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
export const updateRestaurant = async (id: number, formData: FormData) => {
  try {
    await axios.put(`http://localhost:5000/restaurants/${id}`, formData, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem("token")}`,
        "Content-Type": "multipart/form-data",
      },
    });
  } catch (error) {
    console.error("Error updating restaurant:", error);
  }
};

// ‚úÖ –ë—Ä–∏—à–µ—ö–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
export const deleteRestaurant = async (id: number) => {
  try {
    await axios.delete(`http://localhost:5000/restaurants/${id}`, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
    });
  } catch (error) {
    console.error("Error deleting restaurant:", error);
  }
};

// ‚úÖ –î–æ–¥–∞–≤–∞—ö–µ –º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç –≤–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
export const addMenuItem = async (restaurantId: number, formData: FormData) => {
  try {
    await axios.post(
      `http://localhost:5000/restaurants/${restaurantId}/menu`,
      formData,
      {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
          "Content-Type": "multipart/form-data",
        },
      }
    );
  } catch (error) {
    console.error("Error adding menu item:", error);
  }
};

// ‚úÖ –ê–∂—É—Ä–∏—Ä–∞—ö–µ –º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç
export const updateMenuItem = async (
  menuItemId: number,
  formData: FormData
) => {
  try {
    const token = localStorage.getItem("token");

    if (!token) {
      console.error("‚ùå –ù–µ–º–∞ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω —Ç–æ–∫–µ–Ω!");
      throw new Error("Unauthorized: No token found");
    }

    console.log("üì§ –ò—Å–ø—Ä–∞—ú–∞–º –±–∞—Ä–∞—ö–µ –∑–∞ –∞–∂—É—Ä–∏—Ä–∞—ö–µ:", menuItemId);
    console.log("üîë –¢–æ–∫–µ–Ω:", token);

    const response = await axios.put(
      `http://localhost:5000/menu_items/${menuItemId}`,
      formData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
      }
    );

    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–∂—É—Ä–∏—Ä–∞—ö–µ:", response.data);
    return response.data;
  } catch (error: any) {
    if (error.response) {
      console.error(
        "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç:",
        error.response.data
      );
      if (error.response.status === 403) {
        alert("–ù–µ–º–∞—Ç–µ –¥–æ–∑–≤–æ–ª–∞ –∑–∞ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ –º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç!");
      }
    } else {
      console.error("‚ùå –ù–µ–æ—á–µ–∫—É–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:", error);
    }
    throw error;
  }
};

// ‚úÖ –ë—Ä–∏—à–µ—ö–µ –º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç
export const deleteMenuItem = async (menuItemId: number) => {
  try {
    await axios.delete(`http://localhost:5000/menu_items/${menuItemId}`, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
    });
  } catch (error) {
    console.error("Error deleting menu item:", error);
  }
};
