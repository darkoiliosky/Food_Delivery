import { useSelector, useDispatch } from "react-redux";
import { RootState } from "../store/store";
import styled from "styled-components";
import axios from "axios";
import { clearCart } from "../store/cartSlice";
import { useState } from "react";
import { useNavigate } from "react-router-dom";

// –°—Ç–∏–ª–æ–≤–∏ –∑–∞ Cart
const CartContainer = styled.div`
  padding: 16px;
`;

const CartTitle = styled.h2`
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 16px;
`;

const CartItem = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 0;
  border-bottom: 1px solid #e0e0e0;
`;

const CartItemName = styled.p`
  font-size: 16px;
  font-weight: medium;
`;

const CartItemDetails = styled.div`
  display: flex;
  flex-direction: column;
`;

const CartItemPrice = styled.span`
  color: #38a169;
`;

const CartItemQuantity = styled.span`
  font-size: 14px;
  color: #4a5568;
`;

const TotalPrice = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 16px;
  font-weight: bold;
`;

const ProceedButton = styled.button<{ disabled?: boolean }>`
  background-color: ${({ disabled }) => (disabled ? "#a0aec0" : "#48bb78")};
  color: white;
  padding: 12px;
  border-radius: 4px;
  font-size: 16px;
  cursor: ${({ disabled }) => (disabled ? "not-allowed" : "pointer")};
  transition: background-color 0.3s;

  &:hover {
    background-color: ${({ disabled }) => (disabled ? "#a0aec0" : "#2f855a")};
  }
`;

const Basket: React.FC = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const cartItems = useSelector((state: RootState) => state.cart.items);
  const [loading, setLoading] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Å—Ç–æ–∏ `restaurant_id` –≤–æ `cartItems`
  const restaurantId = cartItems.length > 0 ? cartItems[0].restaurant_id : null;

  // –ò–∑–±—Ä–æ—ò—É–≤–∞—ö–µ –Ω–∞ –≤–∫—É–ø–Ω–∞—Ç–∞ —Ü–µ–Ω–∞
  const totalPrice = cartItems.reduce(
    (total, item) => total + item.price * item.quantity,
    0
  );

  // ‚úÖ –ò—Å–ø—Ä–∞—ú–∞—ö–µ –Ω–∞ –Ω–∞—Ä–∞—á–∫–∞
  const handlePlaceOrder = async () => {
    if (cartItems.length === 0) {
      alert("–í–∞—à–∞—Ç–∞ –∫–æ—à–Ω–∏—á–∫–∞ –µ –ø—Ä–∞–∑–Ω–∞!");
      return;
    }

    console.log("üì¶ cartItems:", cartItems); // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–∞ `restaurant_id`

    const restaurantId = cartItems[0]?.restaurant_id;
    if (!restaurantId) {
      alert("‚ùå –ì—Ä–µ—à–∫–∞: –ù–µ–º–∞ –ø–æ–≤—Ä–∑–∞–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞ –æ–≤–∞–∞ –Ω–∞—Ä–∞—á–∫–∞.");
      return;
    }

    setLoading(true);
    try {
      const response = await axios.post(
        "http://localhost:5000/orders",
        {
          restaurant_id: restaurantId,
          total_price: totalPrice,
          items: cartItems.map((item) => ({
            id: item.id,
            quantity: item.quantity,
          })),
        },
        {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        }
      );

      console.log("‚úÖ Order response:", response.data); // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ—Ç —ò–∞ –ø—Ä–∏–º–∏–ª –Ω–∞—Ä–∞—á–∫–∞—Ç–∞

      alert("‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–ø—Ä–∞–≤–∏–≤—Ç–µ –Ω–∞—Ä–∞—á–∫–∞!");
      dispatch(clearCart());
      navigate("/my-orders");
    } catch (error) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –Ω–∞—Ä–∞—á–∫–∞:", error);

      // –ü–æ–¥–æ–±—Ä–æ –æ–±—Ä–∞–±–æ—Ç—É–≤–∞—ö–µ –Ω–∞ –≥—Ä–µ—à–∫–∏—Ç–µ
      if (error.response) {
        console.log("‚ùå Server Error:", error.response.data);
        alert(
          error.response.data.message ||
            "‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∞ –Ω–∞—Ä–∞—á–∫–∞. –û–±–∏–¥–∏ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        );
      } else if (error.request) {
        console.log("‚ùå No Response from Server");
        alert(
          "‚ùå –°–µ—Ä–≤–µ—Ä–æ—Ç –Ω–µ –æ–¥–≥–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —ò–∞ –≤–∞—à–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∫–æ–Ω–µ–∫—Ü–∏—ò–∞."
        );
      } else {
        alert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –Ω–∞—Ä–∞—á–∫–∞—Ç–∞.");
      }
    }
    setLoading(false);
  };

  return (
    <CartContainer>
      <CartTitle>üõí –í–∞—à–∞—Ç–∞ –∫–æ—à–Ω–∏—á–∫–∞</CartTitle>
      {cartItems.length === 0 ? (
        <p>–í–∞—à–∞—Ç–∞ –∫–æ—à–Ω–∏—á–∫–∞ –µ –ø—Ä–∞–∑–Ω–∞.</p>
      ) : (
        <div>
          {cartItems.map((item) => (
            <CartItem key={item.id}>
              <CartItemDetails>
                <CartItemName>{item.name}</CartItemName>
                <CartItemQuantity>–ö–æ–ª–∏—á–∏–Ω–∞: {item.quantity}</CartItemQuantity>
              </CartItemDetails>
              <CartItemPrice>
                {(item.price * item.quantity).toFixed(2)} –¥–µ–Ω.
              </CartItemPrice>
            </CartItem>
          ))}
          <TotalPrice>
            <p>–í–∫—É–ø–Ω–∞ –¶–µ–Ω–∞:</p>
            <span>{totalPrice.toFixed(2)} –¥–µ–Ω.</span>
          </TotalPrice>
        </div>
      )}
      {cartItems.length > 0 && (
        <ProceedButton onClick={handlePlaceOrder} disabled={loading}>
          {loading ? "–û–±—Ä–∞–±–æ—Ç—É–≤–∞ —Å–µ..." : "–ü–æ—Ç–≤—Ä–¥–∏ –ù–∞—Ä–∞—á–∫–∞"}
        </ProceedButton>
      )}
    </CartContainer>
  );
};

export default Basket;
